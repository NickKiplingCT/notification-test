{"icon":"white","settings":{"router":{"mode":"intelligent","animation":"off"},"theme":"default","push-notifications":{"android":{"enabled":false},"ios":{"enabled":true},"wp":{"enabled":false}}},"name":"Notification","version":"1.1","pages":[{"start":true,"name":"Home","config":[],"content":[{"name":"static_1","type":"area","item-type":"static","content":[{"name":"html_1","type":"content","item-type":"html","content":"<h2>Home</h2>\n\n<div>\n  <p id=\"response\"></p>\n</div>","expressions":{}},{"name":"btnRegister","type":"control","item-type":"button","content":"Register","theme":"default","left-icon":"fa-plus-circle","actions":[{"name":"call_function_1","event":"click","type":"call-function","data":{"name":"registerWithHub"}}],"expressions":{}},{"name":"btnTest","type":"control","item-type":"button","content":"Sample Button","theme":"default","expressions":{},"actions":[{"name":"call_function_1","event":"click","type":"call-function","data":{"name":"notificationTest"}}]}],"expressions":{}}]}],"config":[{"name":"generateSasToken","type":"script","item-type":"function","params":[],"content":"var hubUri = \"https://nick-notifications-test.servicebus.windows.net/nick-notifications-test\";\nvar SHARED_ACCESS_KEY = \"eIAusvhqF9xrYTVHnw0JusStUERnQfTkn8hN6qfS3ws=\";\nvar SHARED_ACCESS_KEY_NAME = \"RootManageSharedAccessKey\";\n\nvar targetUri = encodeURIComponent(hubUri).toLowerCase();\nvar expiry = mdm.getTokenExpiry(10);\nvar toSign = targetUri + \"\\n\" + expiry;\nvar signature = CryptoJS.HmacSHA256(toSign, SHARED_ACCESS_KEY);\nvar base64signature = signature.toString(CryptoJS.enc.Base64);\nvar base64UriEncoded = encodeURIComponent(base64signature);\nreturn \"SharedAccessSignature sr=\" + targetUri + \"&sig=\" + base64UriEncoded + \"&se=\" + expiry + \"&skn=\" + SHARED_ACCESS_KEY_NAME;"},{"name":"getTokenExpiry","type":"script","item-type":"function","params":[{"name":"mins","default":"0","required":true}],"content":"var expiry = new Date();\n    expiry.setMinutes(expiry.getMinutes() + mins);\n    return Date.UTC(\n      expiry.getUTCFullYear(),\n      expiry.getUTCMonth(),\n      expiry.getUTCDate(),\n      expiry.getUTCHours(),\n      expiry.getUTCMinutes(),\n      expiry.getUTCSeconds()\n    ) / 1000;"},{"name":"registerWithHub","type":"script","item-type":"function","params":[],"content":"$scope = this;\n\nvar gcmRegistrationId = mdm.store.data__.notification.token;\nvar xhr = new XMLHttpRequest();\n\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === 4) {\n    if (xhr.status === 201) {\n      var location = xhr.getResponseHeader(\"Location\");\n      if (location !== null) {\n      \tvar azureRegistrationId = location.match(/registrationIDs\\/(.*)\\?/i)[1];\n      \tconsole.log(\"AZURE ID:\", azureRegistrationId);\n        mdm.store.data__.variables.azureId = azureRegistrationId;\n        mdm.utils.updatePage();\n        document.getElementById('response').textContent = 'Azure Id: ' + mdm.store.data__.variables.azureId + ' Token: ' + mdm.store.data__.notification.token;\n      \t$scope.$successCallback(azureRegistrationId);\n      } else {\n      \t$scope.$errorCallback(\"Couldn't get location header, CORS issues?\");  \n      }\n    } else {\n      $scope.$errorCallback(\"Azure registration failed\");\n    }\n  }\n};\n\nxhr.onerror = function () {\n  $scope.$errorCallback(\"Azure registration failed\");\n};\n\nconsole.log(\"REGISTERING\");\nxhr.open('POST', \"https://nick-notifications-test.servicebus.windows.net/nick-notifications-test/registrationIDs/?api-version=2015-01\", true);\nxhr.setRequestHeader(\"Content-Type\", \"application/atom+xml;type=entry;charset=utf-8\");\nxhr.setRequestHeader(\"Authorization\", mdm.generateSasToken());\nxhr.setRequestHeader(\"x-ms-version\", \"2015-01\");\nxhr.send();"},{"name":"nkNotificationTest","type":"script","item-type":"function","params":[],"content":"try {\n\tvar nh = new NotificationHubService('nick-notifications-test', 'Endpoint=sb://nick-notifications-test.servicebus.windows.net/;SharedAccessKeyName=DefaultFullSharedAccessSignature;SharedAccessKey=JWNbTZhLTre8bvWEQLC2k0W50tVc/mtS2rM9UUZimHw=');\n\n\tnh.createRegistrationId(function(error, res) { \n\t\tvar response;\n\n\t\tif(error) {\n\t\t\tresponse = error;\n\t\t}\n\t\telse {\n\t\t\tresponse = res\n\t\t}\n\t\talert('Hello: ' + response);\n\t\tdocument.getElementById('response').textContent = response;\n\t});\n}\ncatch(e) {\n\talert(e);\n}"},{"name":"notificationTest","type":"script","item-type":"function","params":[],"content":"var $scope = this; \nvar username = 'Nick';\nxhr = new XMLHttpRequest();\n\nxhr.onreadystatechange = function () {\n  if (xhr.readyState === 4) {\n    if (xhr.status === 200) {\n      console.log(\"SUCCESS!\");\n      $scope.$successCallback(\"Update Azure registration success!\");\n      document.getElementById('response').textContent = 'Update Azure registration success!';\n    } else {\n      $scope.$errorCallback(\"Update Azure registration failed.\");\n      document.getElementById('response').textContent = 'Update Azure registration failed!';\n    }\n  }\n};\nxhr.onerror = function () {\n  $scope.$errorCallback(\"Update Azure registration failed.\");\n};\nif (mdm.store.data__.variables.azureId !== undefined && mdm.store.data__.variables.azureId !== \"undefined\") {\n  console.log('Updating Azure Registration...', username);\n  xhr.open('PUT', \"https://nick-notifications-test.servicebus.windows.net/nick-notifications-test/registrations/\" + mdm.store.data__.variables.azureId + \"?api-version=2015-01\", true);\n  xhr.setRequestHeader(\"Content-Type\", \"application/atom+xml;type=entry;charset=utf-8\");\n  xhr.setRequestHeader(\"Authorization\", mdm.generateSasToken());\n  xhr.setRequestHeader(\"x-ms-version\", \"2015-01\");\n\n  var android = '<?xml version=\"1.0\" encoding=\"utf-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\"><content type=\"application/xml\"><GcmTemplateRegistrationDescription xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\"><Tags>everyone,' + username + '</Tags><GcmRegistrationId>' + mdm.store.data__.notification.token + '</GcmRegistrationId><BodyTemplate><![CDATA[{\"data\":{\"message\":\"$(message)\",\"payload\": {\"type\": \"xmpp_message\", \"from\": \"$(sender)\", \"body\": \"$(body)\"}}}]]></BodyTemplate></GcmTemplateRegistrationDescription></content></entry>';\n\n  var ios = '<?xml version=\"1.0\" encoding=\"utf-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\"><content type=\"application/xml\"><AppleTemplateRegistrationDescription xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\"><Tags>everyone,' + username + '</Tags><DeviceToken>' + mdm.store.data__.notification.token + '</DeviceToken><BodyTemplate><![CDATA[{\"aps\":{\"alert\":\"$(message)\"}, \"payload\": {\"type\": \"xmpp_message\", \"from\": \"$(sender)\", \"body\": \"$(body)\"}}]]></BodyTemplate></AppleTemplateRegistrationDescription></content></entry>';\n\n  var winphone = '<?xml version=\"1.0\" encoding=\"utf-8\"?><entry xmlns=\"http://www.w3.org/2005/Atom\"><content type=\"application/xml\"><WindowsTemplateRegistrationDescription xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://schemas.microsoft.com/netservices/2010/10/servicebus/connect\"><Tags>everyone, ' + username + '</Tags><ChannelUri>' + mdm.store.data__.notification.token + '</ChannelUri><BodyTemplate><![CDATA[{\"aps\":{\"alert\":\"$(message)\"}, \"payload\": {\"type\": \"xmpp_message\", \"from\": \"$(sender)\", \"body\": \"$(body)\"}}]]></BodyTemplate></WindowsTemplateRegistrationDescription></content></entry>';\n\n  var xml = null;\n  switch (mdm.store.data__.env.platform.name) {\n    case \"android\":\n      xml = android;\n      break;\n    case \"ios\":\n      xml = ios;\n      break;\n    case \"winphone\":\n      xml = winphone;\n      break;\n  }\n  if (xml !== null) {\n      xhr.send(xml);\n  } else {\n      $scope.$successCallback(\"Push is not available for this platform.\");\n      document.getElementById('response').textContent = 'Push is not available for this platform.';\n  }\n} else {\n  $scope.$errorCallback(\"Couldn't get registration ID from previous request.\");\n  document.getElementById('response').textContent = 'Couldn\\'t get registration ID from previous request.';\n}"}],"components":[],"translation":{"default":"en_GB"}}